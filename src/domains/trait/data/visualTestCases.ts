/**
 * Visual Test Cases
 *
 * This file contains test cases for visual regression testing of particle traits.
 * Each test case defines a specific combination of traits to be rendered and compared.
 *
 * IMPORTANT: This file is auto-generated. Do not edit directly.
 * Generated by visual-regression-testing.ps1
 */
import { ParticleRole } from '../../particle/types';
import { Color } from './colorPalettes';

/**
 * Visual test case interface
 */
export interface VisualTestCase {
  id: string;
  name: string;
  description: string;
  role: ParticleRole;
  color: Color;
  shape: string;
  shaderEffect?: string;
  parameters?: Record<string, any>;
  referenceImage?: string; // Base64 encoded reference image
}

/**
 * Visual test cases
 */
export const VISUAL_TEST_CASES: Record<string, VisualTestCase> = {
  // Core particle with basic shape
  coreBasic: {
    id: 'coreBasic',
    name: 'Core Basic',
    description: 'Core particle with basic sphere shape',
    role: ParticleRole.CORE,
    color: { r: 1.0, g: 0.8, b: 0.2 },
    shape: 'sphere'
  },
  
  // Control particle with cube shape
  controlCube: {
    id: 'controlCube',
    name: 'Control Cube',
    description: 'Control particle with cube shape',
    role: ParticleRole.CONTROL,
    color: { r: 0.2, g: 0.6, b: 1.0 },
    shape: 'cube'
  },
  
  // Movement particle with cylinder shape
  movementCylinder: {
    id: 'movementCylinder',
    name: 'Movement Cylinder',
    description: 'Movement particle with cylinder shape',
    role: ParticleRole.MOVEMENT,
    color: { r: 0.0, g: 0.8, b: 0.4 },
    shape: 'cylinder'
  },
  
  // Defense particle with dodecahedron shape
  defenseDodecahedron: {
    id: 'defenseDodecahedron',
    name: 'Defense Dodecahedron',
    description: 'Defense particle with dodecahedron shape',
    role: ParticleRole.DEFENSE,
    color: { r: 0.8, g: 0.2, b: 0.2 },
    shape: 'dodecahedron'
  },
  
  // Attack particle with cone shape
  attackCone: {
    id: 'attackCone',
    name: 'Attack Cone',
    description: 'Attack particle with cone shape',
    role: ParticleRole.ATTACK,
    color: { r: 1.0, g: 0.4, b: 0.0 },
    shape: 'cone'
  },
  
  // Core particle with glow effect
  coreGlow: {
    id: 'coreGlow',
    name: 'Core Glow',
    description: 'Core particle with glow effect',
    role: ParticleRole.CORE,
    color: { r: 1.0, g: 0.8, b: 0.2 },
    shape: 'sphere',
    shaderEffect: 'basicGlow',
    parameters: {
      intensity: 2.0
    }
  },
  
  // Control particle with pulse effect
  controlPulse: {
    id: 'controlPulse',
    name: 'Control Pulse',
    description: 'Control particle with pulse effect',
    role: ParticleRole.CONTROL,
    color: { r: 0.2, g: 0.6, b: 1.0 },
    shape: 'cube',
    shaderEffect: 'pulsate',
    parameters: {
      frequency: 3.0
    }
  },
  
  // Movement particle with wave effect
  movementWave: {
    id: 'movementWave',
    name: 'Movement Wave',
    description: 'Movement particle with wave effect',
    role: ParticleRole.MOVEMENT,
    color: { r: 0.0, g: 0.8, b: 0.4 },
    shape: 'cylinder',
    shaderEffect: 'waveDistortion',
    parameters: {
      amplitude: 0.15,
      frequency: 7.0
    }
  }
};

/**
 * Get a visual test case by ID
 */
export function getVisualTestCase(id: string): VisualTestCase {
  return VISUAL_TEST_CASES[id] || VISUAL_TEST_CASES.coreBasic;
}

/**
 * Get all visual test cases
 */
export function getAllVisualTestCases(): VisualTestCase[] {
  return Object.values(VISUAL_TEST_CASES);
}

/**
 * Get visual test cases by role
 */
export function getVisualTestCasesByRole(role: ParticleRole): VisualTestCase[] {
  return Object.values(VISUAL_TEST_CASES).filter(testCase => testCase.role === role);
}

/**
 * Get visual test cases by shape
 */
export function getVisualTestCasesByShape(shape: string): VisualTestCase[] {
  return Object.values(VISUAL_TEST_CASES).filter(testCase => testCase.shape === shape);
}

/**
 * Get visual test cases by shader effect
 */
export function getVisualTestCasesByShaderEffect(shaderEffect: string): VisualTestCase[] {
  return Object.values(VISUAL_TEST_CASES).filter(testCase => testCase.shaderEffect === shaderEffect);
}
